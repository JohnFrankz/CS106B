Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. It took 3.4s to do the search, they found 4 perfect numbers: 6, 28, 496, 8128

Q2. Make a table of the timing results for `findPerfects` that you observed. (old-school table of text rows and columns is just fine)
A2.    size      tiem(secs)
    ---------|----------------
      10000         0.360
      20000         0.963
      40000         3.213
      80000        12.103

Q3. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not? Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. 1) different workload,
    2) different workload,

Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4. time spend: 12 * 4E+(3300 / 8) => 12 * 4E+206 s

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5. Because the expression in the isPerfect return statement contains: 
    n == divisorSum(n), n is always less than zero, and the return value of 
    divisorSum is always greater than one (modify the initial value of total 
    to 1).

Q6. Explain your testing strategy for `smarterSum` and how you chose your specific test cases that lead you to be confident the function is working correctly.
A6. TODO

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7.    size      tiem(secs)
    ---------|----------------
      10000         0.195
      20000         0.225
      40000         0.270
      80000         0.465


Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8. I expect it will take 36,966 s.(0.195 * sqrt(3300) * 3300)

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9. TODO

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. TODO

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. TODO

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. TODO

Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. TODO


